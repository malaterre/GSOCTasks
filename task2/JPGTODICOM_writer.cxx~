/*=========================================================================

  Program: GDCM (Grassroots DICOM). A DICOM library

  Copyright (c) 2006-2011 Mathieu Malaterre
  All rights reserved.
  See Copyright.txt or http://gdcm.sourceforge.net/Copyright.html for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/

#include "gdcmImageReader.h"
#include "gdcmSequenceOfFragments.h"
#include "gdcmSystem.h"
#include "gdcmImageWriter.h"
#include "gdcmAttribute.h"
#include <iostream>
#include <fstream>

int main(int argc, char *argv[])
{
  if( argc < 3 )
    {
    std::cerr << argv[0] << " input.rgb output.dcm" << std::endl;
    return 1;
    }
  const char *filename = argv[1];
  const char *outfilename = argv[2];

  size_t len = gdcm::System::FileSize(filename);
  std::ifstream is(filename);

  char * buf = new char[len];
  is.read(buf, len);

 gdcm::SmartPointer<gdcm::Image> image = new gdcm::Image;


  gdcm::ImageWriter writer;

//  gdcm::Image &image;
  image->SetNumberOfDimensions( 2 );
  unsigned int dims[3] = {};
  dims[0] = 366;
  dims[1] = 254;
  image->SetDimensions( dims );
  gdcm::PixelFormat pf = gdcm::PixelFormat::UINT8;
  pf.SetSamplesPerPixel( 3 );
  image->SetPixelFormat( pf );
  gdcm::PhotometricInterpretation pi = gdcm::PhotometricInterpretation::RGB;
  image->SetPhotometricInterpretation( pi );
  image->SetTransferSyntax( gdcm::TransferSyntax::JPEGBaselineProcess1 );

  gdcm::DataElement pixeldata( gdcm::Tag(0x7fe0,0x0010) );
  pixeldata.SetByteValue( buf, len );
  image->SetDataElement( pixeldata );

  writer.SetFileName( outfilename );

  writer.SetImage(*image);
  if( !writer.Write() )
    {
    return 1;
    }
  delete[] buf;


  return 0;
}
